===================
Convert to Solr XML
===================

We need to set the site since we're a functional test:

>>> import zeit.cms.testing
>>> zeit.cms.testing.set_site()

Get article for adapter tests:

>>> import zope.component

>>> import zeit.cms.interfaces
>>> import zeit.cms.testing
>>> import datetime
>>> principal = zeit.cms.testing.create_interaction()
>>> article = zeit.cms.interfaces.ICMSContent(
...     'http://xml.zeit.de/online/2007/01/Somalia')
>>> with zeit.cms.checkout.helper.checked_out(article) as checked_out:
...     zeit.cms.content.interfaces.ICommonMetadata(
...         checked_out).breaking_news = True
...     zeit.cms.content.interfaces.ICommonMetadata(
...         checked_out).title = "Strip <em>the</em> &amp; please"
...     zeit.cms.content.interfaces.ICommonMetadata(
...         checked_out).product = zeit.cms.content.sources.Product(u'KINZ')

>>> images = zeit.content.image.interfaces.IImages(article)
>>> image = zeit.cms.interfaces.ICMSContent(
...     'http://xml.zeit.de/2006/DSC00109_2.JPG')
>>> checked_out = zeit.cms.checkout.interfaces.ICheckoutManager(
...     image).checkout()
>>> image_metadata = zeit.content.image.interfaces.IImageMetadata(checked_out)
>>> image_metadata.expires = datetime.datetime(2007, 4, 1)
>>> checked_in = zeit.cms.checkout.interfaces.ICheckinManager(
...     checked_out).checkin()
>>> images.image = checked_in

>>> import mock
>>> import stabledict
>>> import zeit.cms.tagging.testing
>>> helper = zeit.cms.tagging.testing.TaggingHelper()
>>> patcher = mock.patch('zeit.cms.tagging.interfaces.ITagger')
>>> tagger = patcher.start()
>>> tags = stabledict.StableDict()
>>> tags['Code1'] = helper.get_tag('Code1')
>>> tags['Code2'] = helper.get_tag('Code2')
>>> tagger.return_value = tags

Build a converter:

>>> import zeit.solr.interfaces
>>> article_converter = zeit.solr.interfaces.ISolrConverter(article)
>>> article_converter
<zeit.solr.converter.SolrConverter object at 0xc5f02ac>


Convert an article and check resultset:

>>> import lxml.etree
>>> root_node = article_converter.convert()
>>> print lxml.etree.tostring(root_node, pretty_print=True)
<add ...>
  <doc>
    <field name="authors">Hans Meiser</field>
    <field name="referenced">http://xml.zeit.de/2006/DSC00109_2.JPG</field>
    <field name="authors_fulltext">Hans Meiser</field>
    <field name="breaking_news">true</field>
    ...
    <field name="byline">Von Jochen Stahnke</field>
    <field name="countings">true</field>
    <field name="date-last-modified">20...Z</field>
    <field name="DailyNL">false</field>
    <field name="has_recensions">false</field>
    <field name="keywords">Code1 Code2</field>
    <field name="keywords_list">Code1</field>
    <field name="keywords_list">Code2</field>
    <field name="last_modified_by">zope.user</field>
    <field name="last-semantic-change">20...Z</field>
    <field name="main_text">Kriegsherr...Macht erobert &#187;</field>
    <field name="product_id">KINZ</field>
    <field name="published">not-published</field>
    <field name="image-reference">http://xml.zeit.de/2006/DSC00109_2.JPG</field>
    <field name="image-reference"></field>
    <field name="image-reference">JPG</field>
    <field name="ressort">International</field>
    <field name="serie">-</field>
    <field name="subtitle">Im Zuge des &#228;thiopischen Vormarsches auf Mogadischu kriechen in Somalia auch die alten Miliz-Chefs wieder hervor.</field>
    <field name="supertitle">Somalia</field>
    <field name="teaser_title">R&#252;ckkehr der Warlords</field>
    <field name="teaser_text">Im Zuge des &#228;thiopischen Vormarsches auf Mogadischu kriechen in Somalia auch die alten Miliz-Chefs wieder hervor.</field>
    <field name="title">R&#252;ckkehr der Warlords</field>
    <field name="type">article</field>
    <field name="uuid">{urn:uuid:<GUID>}</field>
    <field name="volume">1</field>
    <field name="uniqueId">http://xml.zeit.de/online/2007/01/Somalia</field>
    <field name="year">2007</field>
    <field name="icon">/++noop++7b96ef8299459c6372971b040141db4d/@@/zeit-content-article-interfaces-IArticle-zmi_icon.png</field>
  </doc>
</add>
<BLANKLINE>

>>> zope.index.text.interfaces.ISearchableText(article).getSearchableText()
[u'Kriegsherr Hussein Mohammed Aidid hat ...


Check out the article for further field tests.

>>> checked_out = zeit.cms.checkout.interfaces.ICheckoutManager(
...     article).checkout()
>>> article_converter2 = zeit.solr.interfaces.ISolrConverter(checked_out)
>>> article_converter2
<zeit.solr.converter.SolrConverter object at ...>
>>> root_node = article_converter2.convert()
>>> print lxml.etree.tostring(root_node, pretty_print=True)
<add ...>
  <doc>
    <field name="authors">Hans Meiser</field>
    <field name="authors_fulltext">Hans Meiser</field>
    <field name="breaking_news">true</field>
    ...
    <field name="byline">Von Jochen Stahnke</field>
    ...
    <field name="keywords">Code1 Code2</field>
    <field name="keywords_list">Code1</field>
    <field name="keywords_list">Code2</field>
    <field name="last_modified_by">zope.user</field>
    <field name="last-semantic-change">20...Z</field>
    <field name="main_text">Kriegsherr...Macht erobert &#187;</field>
    <field name="product_id">KINZ</field>
    <field name="published">not-published</field>
    <field name="ressort">International</field>
    <field name="serie">-</field>
    <field name="subtitle">Im Zuge des &#228;thiopischen Vormarsches auf Mogadischu kriechen in Somalia auch die alten Miliz-Chefs wieder hervor.</field>
    <field name="supertitle">Somalia</field>
    <field name="teaser_title">R&#252;ckkehr der Warlords</field>
    <field name="teaser_text">Im Zuge des &#228;thiopischen Vormarsches auf Mogadischu kriechen in Somalia auch die alten Miliz-Chefs wieder hervor.</field>
    <field name="title">Strip the &amp; please</field>
    <field name="type">article</field>
    <field name="uuid">{urn:uuid:<GUID>}</field>
    <field name="volume">1</field>
    <field name="uniqueId">http://xml.zeit.de/online/2007/01/Somalia</field>
    <field name="year">2007</field>
    <field name="icon">/++noop++7b96ef8299459c6372971b040141db4d/@@/zeit-content-article-interfaces-IArticle-zmi_icon.png</field>
  </doc>
</add>
<BLANKLINE>

>>> checked_in = zeit.cms.checkout.interfaces.ICheckinManager(
...     checked_out).checkin()


Convert an image and check resultset:

>>> image = zeit.cms.interfaces.ICMSContent(
... 'http://xml.zeit.de/2006/DSC00109_2.JPG')
>>> with zeit.cms.checkout.helper.checked_out(image) as checked_out:
...     image_meta = zeit.content.image.interfaces.IImageMetadata(checked_out)
...     image_meta.title   = 'image title'
...     image_meta.year    = '2006'
...     image_meta.volume  = '05'
...     image_meta.alt     = 'alternative text'
...     image_meta.caption = 'caption text'
>>> image_converter = zeit.solr.interfaces.ISolrConverter(image)
>>> root_node = image_converter.convert()
>>> print lxml.etree.tostring(root_node, pretty_print=True)
<add ...>...
    <field name="alt">alternative text</field>
    <field name="caption">caption text</field>
    <field name="date-last-modified">...</field>
    <field name="last_modified_by">zope.user</field>
    <field name="last-semantic-change">20...Z</field>
    <field name="published">not-published</field>
    <field name="title">image title</field>
    <field name="type">image</field>
    <field name="uuid">{urn:uuid:e2500273-fa09-48ff-a63d-063f3fcb3e4e}</field>
    <field name="volume">5</field>
    <field name="uniqueId">http://xml.zeit.de/2006/DSC00109_2.JPG</field>
    <field name="year">2006</field>
    <field name="icon">/++noop++3ee62bd74c764a2db7c9faa0a7ea9661/@@/zeit-content-image-interfaces-IImage-zmi_icon.png</field>
    <field name="graphical-preview-url">/repository/2006/DSC00109_2.JPG/thumbnail</field>
    <field name="graphical-preview-url-large">/repository/2006/DSC00109_2.JPG/preview</field>
    </doc>
</add>
<BLANKLINE>

Convert a centerpage and check resultset:
(TODO: Use centerpage with dav properties!)

>>> cp = zeit.cms.interfaces.ICMSContent(
...     'http://xml.zeit.de/online/2007/01/index')
>>> cp_converter = zeit.solr.interfaces.ISolrConverter(cp)
>>> root_node = cp_converter.convert()
>>> print lxml.etree.tostring(root_node, pretty_print=True)
<add xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <doc>
    <field ...
  </doc>
</add>
<BLANKLINE>



Get a date
>>> import pytz
>>> date = datetime.datetime.now(tz=pytz.UTC)
>>> date
datetime.datetime...

Checkout article, change last semantic change to date, checkin
>>> dummy = with_statement
>>> with zeit.cms.checkout.helper.checked_out(article) as checked_out:
...     zeit.cms.content.interfaces.ISemanticChange(checked_out).last_semantic_change = date

>>> root_node = article_converter.convert()
>>> doc_node = root_node.doc
>>> print (doc_node.tag)
doc


Create a new article containing some raw fields.

>>> import StringIO
>>> from zeit.content.article.article import Article
>>> article_string = StringIO.StringIO("""\
... <?xml version="1.0" encoding="UTF-8"?>
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype">
...   <body>
...     <title>my_article</title>
...     <supertitle>moep</supertitle>
...     <p>testp</p>
...     <division type="page">
...       <p>testp2</p>
...       <raw expires="">
...         <p>hello<foo id="bar"/></p>
...       </raw>
...       <p>testp3</p>
...       <raw expires="">
...         <p>another <strong>raw</strong> box</p>
...       </raw>
...     </division>
...   </body>
... </article>
... """)
>>> article_raw = Article(article_string)
>>> article_raw_converter = zeit.solr.interfaces.ISolrConverter(article_raw)
>>> article_raw_converter
<zeit.solr.converter.SolrConverter object at ...>
>>> root_node = article_raw_converter.convert()
>>> print lxml.etree.tostring(root_node, pretty_print=True)
<add xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <doc>
    <field name="authors"></field>
    <field name="authors_fulltext"></field>
    <field name="keywords">Code1 Code2</field>
    <field name="keywords_list">Code1</field>
    <field name="keywords_list">Code2</field>
    <field name="main_text">testp testp2 hello testp3 another raw box</field>
    <field name="published">not-published</field>
    <field name="raw-tags">&lt;raw xmlns:py="http://codespeak.net/lxml/objectify/pytype" expires=""&gt;&lt;p&gt;hello&lt;foo id="bar"/&gt;&lt;/p&gt;&lt;/raw&gt;&lt;raw xmlns:py="http://codespeak.net/lxml/objectify/pytype" expires=""&gt;&lt;p&gt;another &lt;strong&gt;raw&lt;/strong&gt; box&lt;/p&gt;&lt;/raw&gt;</field>
    <field name="subtitle"></field>
    <field name="supertitle">moep</field>
    <field name="title">my_article</field>
    <field name="type">article</field>
    <field name="volume" xsi:nil="true"/>
    <field name="year" xsi:nil="true"/>
    <field name="icon">/++noop++7b96ef8299459c6372971b040141db4d/@@/zeit-content-article-interfaces-IArticle-zmi_icon.png</field>
  </doc>
</add>


Clean up:

>>> patcher.stop()
